{"version":"1","records":[{"hierarchy":{"lvl1":"Setup"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"Setup"},"content":"","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"Setup","lvl2":"Build Locally"},"type":"lvl2","url":"/#build-locally","position":2},{"hierarchy":{"lvl1":"Setup","lvl2":"Build Locally"},"content":"To build the book locally you need to install \n\nJupyter Book:\n\nSetup the github repo:gh auth login \ngh repo clone osjayaprakash/notes\n\nInstall sublime text editor:brew install --cask sublime-text sublime-merge\npip3 install notebookcd $HOME && python3 -m venv cs230 && cd - \nsource ~/cs230/bin/activate\npython3 -m pip install -U jupyter-book\n\nWith \n\nJupyter Book installed you can build the book locally as follows:# From the root directory of the repository\njupyter-book build .\n\nThe HTML of the book are located in the _build/html directory. Open the index.html file to land on the home page of the book.","type":"content","url":"/#build-locally","position":3},{"hierarchy":{"lvl1":"Setup","lvl2":"Developing"},"type":"lvl2","url":"/#developing","position":4},{"hierarchy":{"lvl1":"Setup","lvl2":"Developing"},"content":"This repo uses pre-commit, so after cloning run pip install -r requirements.txt and pre-commit install prior to committing.\nIf you have already committed, but your PR is failing because of a pre-commit error, run pre-commit run --all","type":"content","url":"/#developing","position":5},{"hierarchy":{"lvl1":"S&P 500 Investment Strategy Analysis"},"type":"lvl1","url":"/colabs/sp500-stock-eda","position":0},{"hierarchy":{"lvl1":"S&P 500 Investment Strategy Analysis"},"content":"\n\n","type":"content","url":"/colabs/sp500-stock-eda","position":1},{"hierarchy":{"lvl1":"S&P 500 Investment Strategy Analysis"},"type":"lvl1","url":"/colabs/sp500-stock-eda#s-p-500-investment-strategy-analysis","position":2},{"hierarchy":{"lvl1":"S&P 500 Investment Strategy Analysis"},"content":"\n\n# !pip3 install kagglehub pandas matplotlib\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n\n","type":"content","url":"/colabs/sp500-stock-eda#s-p-500-investment-strategy-analysis","position":3},{"hierarchy":{"lvl1":"S&P 500 Investment Strategy Analysis","lvl2":"Download SP500 stock for last 30 years"},"type":"lvl2","url":"/colabs/sp500-stock-eda#download-sp500-stock-for-last-30-years","position":4},{"hierarchy":{"lvl1":"S&P 500 Investment Strategy Analysis","lvl2":"Download SP500 stock for last 30 years"},"content":"\n\nimport kagglehub\n\npath = kagglehub.dataset_download(\"asimislam/30-yrs-stock-market-data\")\nprint(\"Path to dataset files:\", path)\n\n!ls \"{path}\"\n\ndf1 = pd.read_csv(f\"{path}/30_yr_stock_market_data.csv\")\n\ndf1.columns\n\ndf1.head(5)\n\n","type":"content","url":"/colabs/sp500-stock-eda#download-sp500-stock-for-last-30-years","position":5},{"hierarchy":{"lvl1":"S&P 500 Investment Strategy Analysis","lvl2":"Fill the missing values"},"type":"lvl2","url":"/colabs/sp500-stock-eda#fill-the-missing-values","position":6},{"hierarchy":{"lvl1":"S&P 500 Investment Strategy Analysis","lvl2":"Fill the missing values"},"content":"use ffill to fill the data from previous days if it is missing.\n\ndf = df1[['Date', 'S&P500 (^GSPC)']]\nif 'S&P500 (^GSPC)' in df.columns:\n    df = df.rename(columns={'S&P500 (^GSPC)': 'SP500'})\ndf.head(5)\n\nif 'Date' in df.columns:\n    df.set_index('Date', inplace=True)\n    d_range = pd.date_range(start=df.index.min(), end=df.index.max())\n    df.reindex(d_range)\n    df.ffill(inplace=True)\n    df = df.reset_index()\n    df = df.rename(columns={'index': 'Date'})\n\nmissing_dates_df = df[df.isnull().any(axis=1)]\nprint(f\"{missing_dates_df.size}, {df.size}, {len(df)}\")\n\nmissing_dates_df.size\nmissing_dates_df.head(5)\n\n# df['day'] = pd.to_datetime(df['Date']).dt.day\n# df['month'] = pd.to_datetime(df['Date']).dt.month\n# df['year'] = pd.to_datetime(df['Date']).dt.year\n\ndf['weekday'] = pd.to_datetime(df['Date']).dt.weekday\ndf['max'] = df['SP500'].expanding().max()\ndf['r7_max'] = df['SP500'].rolling(window=7).max()\ndf['r30_max'] = df['SP500'].rolling(window=30).max()\n\nprint((df['r7_max']*0.9>df['SP500']).sum())\nprint((df['r30_max']==df['SP500']).sum())\n\ndf.query('r7_max*0.9>SP500')\n\nfrom collections import namedtuple\n\nclass Asset:\n    def __init__(self, cash, stock):\n        self.cash = cash\n        self.stock = stock\n        self.total = cash + stock\n\n    def __add__(self, other):\n        return Asset(self.cash + other.cash, self.stock + other.stock)\n\n\nCurrentAsset = namedtuple('CurrentAsset', ['cash', 'stock'])\nInputs = namedtuple('Inputs', ['values', 'weekday', 'amount'])\nOutputs = namedtuple('Outputs', ['final', 'history'])\n\ndef keep_cash(inputs):\n    values, weekday, amount = inputs\n    pa = CurrentAsset(cash=0, stock=0)\n    final = CurrentAsset(cash=0,stock=0)\n    history = []\n    for d, v in zip(weekday, values):\n        final = CurrentAsset(cash=final.cash+amount, stock=0)\n        history += final\n    return Outputs(final=final, history=history)\n\ndef dollar_avg(inputs):\n    values, weekday, amount = inputs\n    pa = CurrentAsset(cash=0, stock=0)\n    final = CurrentAsset(cash=0,stock=0)\n    history = []\n    for d, v in zip(weekday, values):\n        final = CurrentAsset(cash=0, stock=final.stock + (amount/v))\n        history += final\n    return Outputs(final=final, history=history)\n\n\nv = dollar_avg(Inputs(values=df.SP500.to_list(), weekday=df.weekday.to_list(), amount=100))\n\n\n\nprint(v.final)","type":"content","url":"/colabs/sp500-stock-eda#fill-the-missing-values","position":7},{"hierarchy":{"lvl1":"Overview"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"Overview"},"content":"-\n![Header image showing molecules plotted in two different ways](_static/images/header.png)\n","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"Overview"},"type":"lvl1","url":"/#overview","position":2},{"hierarchy":{"lvl1":"Overview"},"content":"Random notes and colabs. The purpose to start writing some interesting things Iâ€™ve come across.","type":"content","url":"/#overview","position":3},{"hierarchy":{"lvl1":"Overview","lvl2":"Table of Contents"},"type":"lvl2","url":"/#table-of-contents","position":4},{"hierarchy":{"lvl1":"Overview","lvl2":"Table of Contents"},"content":"Notes from JP\n\nSetup\n\nS&P 500 Investment Strategy Analysis ## Citation\n\n\nPlease cite the [livecommsj overview article](https://doi.org/10.33011/livecoms.3.1.1499):\n\n```bibtex\n@article{white2021deep,\n  title={Deep Learning for Molecules and Materials},\n  journal={Living Journal of Computational Molecular Science},\n  author={White, Andrew D},\n  url={https://dmol.pub},\n  year={2021},\n  volume={3},\n  number={1},\n  pages={1499},\n  doi={10.33011/livecoms.3.1.1499}\n}\n```\n\n\n## License (CC BY-NC 3.0)\n\nCreative Commons Legal Code\n\nAttribution-NonCommercial 3.0 Unported.\n\nSee complete description of license at [https://creativecommons.org/licenses/by-nc/3.0/](https://creativecommons.org/licenses/by-nc/3.0/). ","type":"content","url":"/#table-of-contents","position":5}]}